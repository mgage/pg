##DESCRIPTION

# TEST from the tikz from a pg problem

##ENDDESCRIPTION


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGinfo.pl",
   "PGML.pl",
   #"source.pl",         # used to display problem source button
   "PGcourse.pl",      # Customization file for the course
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$debug=0;
##############################################################
#
#  Setup
#
#


$working_dir = "$envir{templateDirectory}tikz_build";
$file_name    = "image1";
$destination_path = "$envir{templateDirectory}set$setNumber/$file_name";
$ext = 'png';
# this destination_path is still a little fragile.

if ($debug) {
TEXT("working_dir=$working_dir, $BR,
	file_name=$file_name, $BR,
	destination_path=$destination_path",$BR,$BR);
TEXT("Create tikz_graph $PAR");
}
( $pdflatex_command, $copy_command, $convert_command, $displayMode);
sub tikz_graph{
	my $drawing = TikZ_Image2->new(~~%envir);
	# initialize
		$drawing->{working_dir}=$working_dir;
		#$drawing->{file_name}=$file_name; not needed -- included in destination_path
		$drawing->{destination_path}= $destination_path;
        $drawing->ext($ext); # or gif or svg or pdf
		#$drawing->set_commandline_mode("wwtest"); # "wwtest" or "macbook" or "hosted2"
	# end initialize
	# debugging /development
	$copy_command = $drawing->{copy_command};
	$pdflatex_command =$drawing->{pdflatex_command};
	$convert_command = $drawing->{convert_command};
    $display_mode = $drawing->{displayMode};
	# end debugging
	$drawing->addTex(shift);
	$drawing->render();
	return $drawing->{final_destination_path};
}
 
$path = tikz_graph(<<END_TIKZ);
\begin{tikzpicture}[main_node/.style={circle,fill=blue!20,draw,minimum size=1em,inner sep=3pt]}] 
\draw (-4,0) -- (4,0);
\draw (0,-2) -- (0,2);
\draw (0,0) circle (1.5);
\draw (0, 1.5) node[anchor=south]{N} -- (2.5,0)node [above]{y};
\draw (1.2,0.9) node[right]{\((\vec x, x_{n})\)};
\end{tikzpicture}
END_TIKZ


Context("Numeric");

##############################################################
#
#  Text
#
#


Context()->texStrings;

if ($debug) {
BEGIN_TEXT
	Print hi 
	$BR \{protect_underbar("working_dir = $working_dir")\}
	$BR \{protect_underbar("file_name = $file_name")\}
	$BR \{protect_underbar("destination_path = $destination_path")\}
	$BR \{protect_underbar("path = $path") if $path\};
	$BR alias = \{protect_underbar(alias("$path")) if $path\}
	$PAR
	$BR pdflatex \{protect_underbar("$pdflatex_command")\}
	$BR convert \{protect_underbar("$convert_command")\}
	$BR copy    \{protect_underbar("$copy_command")\}
	$BR 
	render command \{protect_underbar("$pdflatex_command $working_dir/hardcopy.tex")\}
	$PAR end debug report
	$PAR
END_TEXT
}

if ($path and ($ext eq "png" or $ext eq "gif") ) {
	TEXT("tikz_image $ext = ",image("$path", width=>227, height=>114));
}
elsif ($path and $ext eq svg){
	TEXT("tikz_image $ext = ",embedSVG($path) );
}

Context()->normalStrings;

#tempDirectory	=>	 /Volumes/WW_test/opt/webwork/webwork2/htdocs/tmp/daemon_course/
# tempURL	=>	 /webwork2_files/tmp/daemon_course/
# templateDirectory	=>	 /Volumes/WW_test/opt/webwork/courses/daemon_course/templates/

#externalLaTeXPath	=>	 /Volumes/WW_test/opt/local/texlive/2010/bin/x86_64-darwin/latex
#externalDvipngPath	=>	 /Volumes/WW_test/opt/local/texlive/2010/bin/x86_64-darwin/dvipng
# externalcp	=>	 /bin/cp
# externalPdflatexPath	=>	 /Volumes/WW_test/opt/local/texlive/2010/bin/x86_64-darwin/pdflatex --shell-escape
# externalConvert	=>	 
##############################################################
#
#  Answers
#
#



ENDDOCUMENT();        # This should be the last executable line in the problem.